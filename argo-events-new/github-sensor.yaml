apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      eventSourceName: github
      eventName: example
      filters:
        data:
          # Name of the event that triggered the delivery: [pull_request, push, yadayadayada]
          # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads
          - path: body.X-GitHub-Event
            type: string
            value:
              - pull_request
          - path: body.action
            type: string
            value:
              - opened
              - edited
              - reopened
              - synchronize
          - path: body.pull_request.state
            type: string
            value:
              - open
          - path: body.pull_request.base.ref
            type: string
            value:
              - master
  triggers:
    - template:
        name: github-workflow-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: trigger-jenkins-
              spec:
                arguments:
                  parameters:
                    - name: repo
                    - name: branch
                    - name: prnumber
                entrypoint: git
                templates:
                  - name: git
                    steps:
                      - - name: curl
                          template: curl
                  - container:
                      args:
                        - >-
                          cd /usr/src; 
                          export repo="{{workflow.parameters.repo}}" ; 
                          export branch="{{workflow.parameters.branch}}" ; 
                          export gitprnum="{{workflow.parameters.prnumber}}"; 
                          echo $repo is the repo;
                          echo $branch is gitbranch; 
                          echo $gitprnum is the gitprnum;  
                          gitdir=$(echo $repo | sed 's/.git$//' | sed 's/\// /g' | awk '{print $NF}');
                           echo $gitdir is gitrepo; 
                          curl -s -i -u $secret -X POST "https://jenkins.opsmx.net:8181/jenkins/job/Dev-$gitdir-forargo/buildWithParameters?token=argocd-jenkins-token&BRANCHNAME=origin/$branch" -o /tmp/temp.out ; 
                          if [  $? -eq 0 ];
                           then echo build succeeded;
                           else echo build failed; exit 1;
                          fi;
                          gitowner=opsmx; 
                          echo commenting on $gitowner $gitdir ;
                          tempurl=$(cat /tmp/temp.out | grep ^Location | awk '{print $2}'| tr -d '\r');
                          apiurl=$(echo "$tempurl"api/xml);
                          echo getting build number from $apiurl;


                          while true ;
                          do
                          if [ -z "$buildurl" ];
                           then 
                          sleep 5;
                          echo still waiting for build to be queued;
                          curl -s -u $secret "$apiurl" -o /tmp/temp.xml;
                          buildurl=$(xmllint --xpath 'string(/leftItem/executable/url)' /tmp/temp.xml);
                           else
                          break;
                          fi;
                          done;
                          echo from jenkins $buildurl is buildurl;
                          echo build started;

                          curl -s -u ${gitcreds} -X POST "https://api.github.com/repos/${gitowner}/${gitdir}/issues/${gitprnum}/comments" -H "Content-type: application/json" -d '{"body":"This PR successfully triggered this build '$buildurl'"}'; 
                           if [  $? -eq 0 ]; then
                          echo post succeeded; else echo post failed; fi;
                      command:
                        - bash
                        - '-c'
                      env:
                        - name: gitcreds
                          valueFrom:
                            secretKeyRef:
                              key: gitcreds
                              name: gitcreds
                        - name: secret
                          valueFrom:
                            secretKeyRef:
                              key: creds
                              name: jenkins-secret
                      image: 'maven:3-openjdk-11'
                    name: curl
          parameters:
            - src:
                dependencyName: test-dep
                dataKey: body.pull_request.head.repo.html_url
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: test-dep
                dataKey: body.pull_request.head.ref
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: test-dep
                dataKey: body.pull_request.number
              dest: spec.arguments.parameters.2.value
      retryStrategy:
        steps: 3
